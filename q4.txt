#include<bits/stdc++.h>

using namespace std;
using   ll = long long;

#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

#define int             long long int

#define pb              push_back
#define mp              make_pair
#define F               first
#define S               second

#define pii             pair<int , int>
#define vec 			vector< int >

#define ALL(v)          v.begin(),v.end()
#define ALLR(v)         v.rbegin(),v.rend()
#define pi              3.14159265358979323
#define inf             LLONG_MAX
#define ones(x)         __builtin_popcount(x)
#define fill(a,b)       memset(a,b,sizeof(a))
#define mod             998244353
#define endl			"\n"

int mod_pow(int a,int b,int m)
{
    int res = 1;
    while(b)
    {
        if(b&1)
        {
            res = (res*a) % m;
        }
        a = (a*a) % m;
        b >>= 1;
    }
    return res;
}

int mod_inverse(int a , int m)
{
    return mod_pow(a , m - 2 , m);
}

int res = 0;
int c[7];

void recur(int x , int y) {
	if(x == 0 && y == 0) {
		return;
	}
	
	if(x == 0) {
		if(y < 0) {
			res += abs(y)*c[2];
			recur(x , y - y);
		}
		else {
			res += abs(y)*c[5];
			recur(x , y - y);
		}
	}
	else if(y == 0) {
		if(x > 0) {
			res += abs(x)*c[3];
			recur(x - x, y);
		}
		else {
			res += abs(x)*c[6];
			recur(x - x, y);
		}
	}
	else {
		if(x > 0 && y > 0) {
			int t1 = min(x , y);
			res += t1*c[4];
			recur(x - t1 , y - t1);
		}
		else if(x < 0 && y < 0) {
			int t1 = min(abs(x) , abs(y));
			res += t1*c[1];
			recur(x + t1 , y + t1);
		}
		else if(x > 0 && y < 0) {
			res += abs(x)*c[3] + abs(y)*c[2];
			recur(x - x , y - y);
		}
		else if(x < 0 && y > 0){
			res += abs(x)*c[6] + abs(y)*c[5];
			recur(x - x , y - y);
		}
	}
}

void solve() {
	int x , y;
	
	cin >> x >> y;
	
	for(int i = 1; i <= 6; ++i) {
		cin >> c[i];
	}
	
	c[1] = min(c[1] , c[2] + c[6]);
	c[2] = min(c[2] , c[1] + c[3]);
	c[3] = min(c[3] , c[2] + c[4]);
	c[4] = min(c[4] , c[3] + c[5]);
	c[5] = min(c[5] , c[4] + c[6]);
	c[6] = min(c[6] , c[1] + c[5]);
	
	swap(c[1] , c[4]);
	swap(c[2] , c[5]);
	swap(c[3] , c[6]);
	
	res = 0;
	
	recur(x , y);
	
	cout << res << endl;
}

signed main() {
    fast;

    int t = 1;

    cin >> t;

    while(t--) {
        solve();
    }

    return 0;
}
